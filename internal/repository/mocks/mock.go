// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/kolibriee/trade-metrics/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// Mockorderbook is a mock of orderbook interface.
type Mockorderbook struct {
	ctrl     *gomock.Controller
	recorder *MockorderbookMockRecorder
}

// MockorderbookMockRecorder is the mock recorder for Mockorderbook.
type MockorderbookMockRecorder struct {
	mock *Mockorderbook
}

// NewMockorderbook creates a new mock instance.
func NewMockorderbook(ctrl *gomock.Controller) *Mockorderbook {
	mock := &Mockorderbook{ctrl: ctrl}
	mock.recorder = &MockorderbookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockorderbook) EXPECT() *MockorderbookMockRecorder {
	return m.recorder
}

// GetOrderBook mocks base method.
func (m *Mockorderbook) GetOrderBook(exchangeName, pair string) (*domain.AsksBids, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBook", exchangeName, pair)
	ret0, _ := ret[0].(*domain.AsksBids)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderBook indicates an expected call of GetOrderBook.
func (mr *MockorderbookMockRecorder) GetOrderBook(exchangeName, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBook", reflect.TypeOf((*Mockorderbook)(nil).GetOrderBook), exchangeName, pair)
}

// SaveOrderBook mocks base method.
func (m *Mockorderbook) SaveOrderBook(exchangeName, pair string, asksBids *domain.AsksBids) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderBook", exchangeName, pair, asksBids)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderBook indicates an expected call of SaveOrderBook.
func (mr *MockorderbookMockRecorder) SaveOrderBook(exchangeName, pair, asksBids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderBook", reflect.TypeOf((*Mockorderbook)(nil).SaveOrderBook), exchangeName, pair, asksBids)
}

// Mockorderhistory is a mock of orderhistory interface.
type Mockorderhistory struct {
	ctrl     *gomock.Controller
	recorder *MockorderhistoryMockRecorder
}

// MockorderhistoryMockRecorder is the mock recorder for Mockorderhistory.
type MockorderhistoryMockRecorder struct {
	mock *Mockorderhistory
}

// NewMockorderhistory creates a new mock instance.
func NewMockorderhistory(ctrl *gomock.Controller) *Mockorderhistory {
	mock := &Mockorderhistory{ctrl: ctrl}
	mock.recorder = &MockorderhistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockorderhistory) EXPECT() *MockorderhistoryMockRecorder {
	return m.recorder
}

// GetOrderHistory mocks base method.
func (m *Mockorderhistory) GetOrderHistory(client *domain.Client) ([]*domain.HistoryOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", client)
	ret0, _ := ret[0].([]*domain.HistoryOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistory indicates an expected call of GetOrderHistory.
func (mr *MockorderhistoryMockRecorder) GetOrderHistory(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*Mockorderhistory)(nil).GetOrderHistory), client)
}

// SaveOrder mocks base method.
func (m *Mockorderhistory) SaveOrder(order *domain.HistoryOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockorderhistoryMockRecorder) SaveOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*Mockorderhistory)(nil).SaveOrder), order)
}
